apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-checkoutservice-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",checkoutservice)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",checkoutservice))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
---
apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-frontend-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",frontend)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",frontend))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
---
apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-recommendationservice-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",recommendationservice)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",recommendationservice))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
---
apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-productcatalogservice-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",productcatalogservice)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",productcatalogservice))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
---
apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-cartservice-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",cartservice)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",cartservice))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
---
apiVersion: metrics.keptn.sh/v1alpha3
kind: KeptnMetric
metadata:
  name: keptnmetric-paymentservice-thrott
  namespace: hipster-shop
spec:
  provider:
    name: "dynatrace"
  query: "(builtin:kubernetes.workload.cpu_throttled:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",paymentservice)))):splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum/builtin:kubernetes.workload.cpu_usage:filter(and(or(eq(\"k8s.namespace.name\",hipster-shop)),or(eq(\"k8s.deployment.name\",paymentservice))))
  :splitBy(\"k8s.namespace.name\",\"k8s.workload.kind\",\"k8s.workload.name\"):sum):default(0.0)*(100.0):setUnit(Percent)"
  fetchIntervalSeconds: 5
